#version 450 core

#define THREAD_SIZE 1024

/*
shared int sharedLinebreaks[1024];
shared int sharedLinebrakCount;
*/
// assumption there less than 4096 simultaneous numbers
shared int sharedNumbers[4096];
shared int sharedNumberCount;


// The calculated checksum. 64 bits.
shared uvec2 sharedSumA;
shared uvec2 sharedSumB;

shared int sharedValuesWrittenCount;

shared int sharedWidth;

// For A
shared int sharedUniqueNumbers;

// Input size.
layout (set = 2, binding = 0) uniform DataSize
{
    int dataSizeInputBytes;
};

// input string
layout (set = 1, binding = 0) restrict buffer DataIn1
{
    int dataIn1[];
};

// Result
layout (set = 1, binding = 1) restrict buffer DataOut1
{
    int outSumA;
    int outSumB;
    int outDebugValueCount;
    int outPadding;
    int outDebugValues[];
};



// not sure which barriers need to be checked
void doBarriers()
{
    memoryBarrierShared();
    groupMemoryBarrier();
    memoryBarrier();
    barrier();
}

int readChar(int index)
{
    if(index < 0 || index >= dataSizeInputBytes)
    {
        return 0;
    }
    int value = dataIn1[index / 4];
    int result = (value >> ((index % 4) * 8)) & 0xff;

    return result;
}

int readNumber(int index)
{
    int c = readChar(index);
    return c - 48;
}

void resetEverything(int indexInThreadGroup)
{
    if(indexInThreadGroup == 0)
    {
        //sharedLinebrakCount = 0;
        sharedUniqueNumbers = 0;
        sharedWidth = dataSizeInputBytes;
        sharedNumberCount = 0;
    }

    doBarriers();
}

void findLinebreaks(int indexInThreadGroup)
{
    for(int index = indexInThreadGroup; index < dataSizeInputBytes - 1; index += THREAD_SIZE)
    {
        if(readChar(index) == 0xA) // lb
        {
            /*
            int lbIndex = atomicAdd(sharedLinebrakCount, 1);
            sharedLinebreaks[lbIndex] = index;
            */
            atomicMin(sharedWidth, index  + 1);
        }
    }
    doBarriers();
}

void findZeroes(int indexInThreadGroup)
{
    for(int index = indexInThreadGroup; index < dataSizeInputBytes - 1; index += THREAD_SIZE)
    {
        if(readChar(index) == 48) // '0'
        {
            int zeroIndex = atomicAdd(sharedNumberCount, 1);
            sharedNumbers[zeroIndex] = index | (index << 16);
        }
    }
    doBarriers();
}

int getIndex(ivec2 pos)
{
    if(pos.x < 0 || pos.y < 0 || pos.x >= sharedWidth - 1 || pos.y >= dataSizeInputBytes / sharedWidth)
    {
        return -1;
    }
    return pos.x + pos.y * sharedWidth;
}
int getOrigIndex(int index)
{
    return (index >> 16) & 0xffff;
}

ivec2 getPosition(int index)
{
    int pindex = index & 0xffff;
    return ivec2(pindex % sharedWidth, pindex / sharedWidth);
}

int checkNumber(ivec2 pos)
{
    int index = getIndex(pos);
    return readNumber(index);
}

void addNumber(int origIndex, ivec2 pos, int number)
{
    if(checkNumber(pos) == number)
    {
        int writeIndex = atomicAdd(sharedNumberCount, 1);
        sharedNumbers[writeIndex] = getIndex(pos) | (origIndex << 16);
        //outDebugValues[writeIndex] = getIndex(pos);
    }
}

layout (local_size_x = THREAD_SIZE, local_size_y = 1, local_size_z = 1) in;
void main()
{
    int indexInThreadGroup = int(gl_LocalInvocationID.x);
    int groupId = int(gl_WorkGroupID.x);


    #if 1
    {
        resetEverything(indexInThreadGroup);
        findLinebreaks(indexInThreadGroup);
        findZeroes(indexInThreadGroup);
/*
        if(indexInThreadGroup == 0)
        {
            outDebugValues[0] = sharedNumberCount;
        }
*/
        for(int number = 1; number < 10; ++number)
        {
            int numberCount = sharedNumberCount;
            doBarriers();
            if(indexInThreadGroup == 0)
            {
                sharedNumberCount = 0;
            }
            doBarriers();
            for(int index = indexInThreadGroup; index < numberCount; index += THREAD_SIZE)
            {
                int p = sharedNumbers[index];
                int orig = getOrigIndex(p);
                ivec2 pos = getPosition(p);
                addNumber(orig, pos + ivec2(+1, 0), number);
                addNumber(orig, pos + ivec2(-1, 0), number);
                addNumber(orig, pos + ivec2(0, +1), number);
                addNumber(orig, pos + ivec2(0, -1), number);
            }
            doBarriers();
            /*
            if(indexInThreadGroup == 0)
            {
                outDebugValues[number] = sharedNumberCount;
            }
            */
        }
        doBarriers();
        // we have B now, A still requires more work
        if(indexInThreadGroup == 0)
        {
            //outDebugValueCount = 10;
            outSumB = sharedNumberCount;
        }

        // find uniques for A.
        {
            for(int index = indexInThreadGroup; index < sharedNumberCount; index += THREAD_SIZE)
            {
                bool isUnique = true;
                int p = sharedNumbers[index];
                for(int j = 0; j < index; ++j)
                {
                    if(sharedNumbers[j] == p)
                    {
                        isUnique = false;
                        break;
                    }
                }
                if(isUnique)
                {
                    atomicAdd(sharedUniqueNumbers, 1);
                }
            }
            doBarriers();
            if(indexInThreadGroup == 0)
            {
                outSumA = sharedUniqueNumbers;
            }
        }
    }
    #endif

}

