#version 450 core

// Need int64, but not supported.....
//#extension GL_EXT_shader_explicit_arithmetic_types_int64 : enable
// not supported by sdlwebgpu by default....
//#extension GL_EXT_shader_atomic_int64 : enable

#define THREAD_SIZE 1024

shared int sharedLinebreaks[1024];
shared int sharedLinebreakCount;

// Input size.
layout (set = 2, binding = 0) uniform DataSize
{
    int dataSizeInputBytes;
};

// input string
layout (set = 1, binding = 0) restrict buffer DataIn1
{
    int dataIn1[];
};

// Linebreaks
layout (set = 1, binding = 1) restrict buffer DataOut1
{
    uint outLBs[];
};

// Indirect buffer
layout (set = 1, binding = 2) restrict buffer DataOut2
{
    uvec4 outComputeDispatch;
};

// not sure which barriers need to be checked
void doBarriers()
{
    memoryBarrierShared();
    groupMemoryBarrier();
    memoryBarrier();
    barrier();
}

int readChar(int index)
{
    if(index < 0 || index >= dataSizeInputBytes)
    {
        return 0;
    }
    int value = dataIn1[index / 4];
    int result = (value >> ((index % 4) * 8)) & 0xff;

    return result;
}

layout (local_size_x = THREAD_SIZE, local_size_y = 1, local_size_z = 1) in;
void main()
{
    int indexInThreadGroup = int(gl_LocalInvocationID.x);

    // Reset shared atomic values
    {
        if(indexInThreadGroup == 0)
        {
            sharedLinebreakCount = 0;
        }
        doBarriers();
    }
    // Find linebreaks.
    {
        for(int index = indexInThreadGroup; index < dataSizeInputBytes; index += THREAD_SIZE)
        {
            if(readChar(index) == 0xA) // line break 0xA
            {
                int count = atomicAdd(sharedLinebreakCount, 1);
                sharedLinebreaks[count] = index;
            }

        }
        doBarriers();
    }

    if(indexInThreadGroup < sharedLinebreakCount)
    {
        outLBs[indexInThreadGroup] = sharedLinebreaks[indexInThreadGroup];
    }
    if(indexInThreadGroup == 0)
    {
        outComputeDispatch = uvec4(sharedLinebreakCount, 1, 1, 0);
    }
}

