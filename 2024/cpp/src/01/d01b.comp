#version 450 core

#define MATRIX_ORDER row_major
//#define MATRIX_ORDER column_major

#define MAX_AMOUNT 1000

shared int sharedDifference;

#define THREAD_SIZE 1024

// using the std140 and MATRIX_ORDER,
// it seems to count every int line as 16 bytes in renderdoc atleast
//layout (std140, set = 1, binding = 0, MATRIX_ORDER) restrict buffer DataIn

// Set 1 seems to be buffer read and write
layout (set = 1, binding = 0) restrict buffer DataIn1
{
    int dataIn1[];
};

layout (set = 1, binding = 1) restrict buffer DataIn2
{
    int dataIn2[];
};

layout (set = 1, binding = 2) restrict buffer DataOut
{
    int dataOut[];
};

// not sure which barriers need to be checked
void doBarriers()
{
    memoryBarrierShared();
    groupMemoryBarrier();
    memoryBarrier();
    barrier();
}

layout (local_size_x = THREAD_SIZE, local_size_y = 1, local_size_z = 1) in;
void main()
{
    uint indexInThreadGroup = gl_LocalInvocationID.x;
    //uint groupThreadIndex = gl_WorkGroupID.x;

    if(indexInThreadGroup == 0)
    {
        sharedDifference = 0;
    }

    doBarriers();

    int localDifference = 0;

    // calculate difference
    {
        uint index = indexInThreadGroup;
        while(index < MAX_AMOUNT)
        {
            int count = 0;
            int value1 = dataIn1[index];
            for(int i = 0; i < MAX_AMOUNT; ++i)
            {
                int value2 = dataIn2[i];
                if(value1 == value2)
                {
                    count++;
                }
            }
            index += THREAD_SIZE;
            localDifference += value1 * count;
        }
    }
    atomicAdd(sharedDifference, localDifference);
    doBarriers();

    // Write out
    if(indexInThreadGroup == 0)
    {
        dataOut[1] = sharedDifference;
    }
}

